name: Release
on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  release:
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest]
        target: [aarch64-apple-darwin, x86_64-apple-darwin]
    runs-on: ${{ matrix.platform }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install frontend dependencies
        run: npm install

      - name: Generate icons
        run: npm run generate-icons

      - name: Setup Keychain
        if: matrix.platform == 'macos-latest'
        run: |
          security create-keychain -p "temp_password" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "temp_password" build.keychain
          echo "${{ secrets.APPLE_CERTIFICATE }}" | base64 --decode > certificate.p12
          security import certificate.p12 -k build.keychain -P "${{ secrets.APPLE_CERTIFICATE_PASSWORD }}" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "temp_password" build.keychain
          security find-identity -v -p codesigning build.keychain

      - name: Build and Sign
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: 'Developer ID Application: Egidio Salinaro (A6ZJ3YH4YL)'
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.APPLE_CERTIFICATE }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          ENABLE_CODE_SIGNING: true
        with:
          args: --target ${{ matrix.target }}
          tagName: ${{ github.ref_name }}
          releaseName: 'TypeTidy v${{ github.ref_name }}'
          releaseBody: |
            To open TypeTidy on macOS:
            1. Download the DMG file for your Mac:
               - Intel Mac (x86_64): TypeTidy_x86_64.dmg
               - Apple Silicon Mac (M1/M2): TypeTidy_aarch64.dmg
            2. Open the DMG file
            3. Drag TypeTidy to your Applications folder
            4. The first time you open it:
               - Right-click (or Control-click) on TypeTidy in Applications
               - Select "Open" from the menu
               - Click "Open" in the security dialog
            After this first-time process, you can open TypeTidy normally.
          releaseDraft: true
          prerelease: false
