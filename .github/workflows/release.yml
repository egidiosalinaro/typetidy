name: Release
on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest]
    runs-on: ${{ matrix.platform }}
    timeout-minutes: 30

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Install frontend dependencies
        run: npm install

      - name: Generate icons
        run: npm run generate-icons

      - name: Import Certificate
        if: matrix.platform == 'macos-latest'
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: temp_password
        run: |
          echo "$APPLE_CERTIFICATE" | base64 --decode > certificate.p12
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
          rm certificate.p12

      - name: Build and Sign
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
        with:
          tagName: ${{ github.ref_name }}
          releaseName: 'TypeTidy v${{ github.ref_name }}'
          releaseBody: |
            New release of TypeTidy.
            Visit https://typetidy.com/download to get the correct version for your Mac.
          releaseDraft: true
          prerelease: false

      - name: Prepare DMG for Notarization
        if: matrix.platform == 'macos-latest'
        run: |
          echo "Creating DMG..."
          DMG_PATH="src-tauri/target/${{ matrix.target }}/release/bundle/dmg/TypeTidy_${{ github.ref_name }}_${{ matrix.target }}.dmg"
          echo "DMG path: $DMG_PATH"
          ls -la "$(dirname "$DMG_PATH")"
          if [ ! -f "$DMG_PATH" ]; then
            echo "Error: DMG file not found!"
            exit 1
          fi

      - name: Notarize DMG
        if: matrix.platform == 'macos-latest'
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
        run: |
          echo "Starting notarization..."
          xcrun notarytool submit "src-tauri/target/${{ matrix.target }}/release/bundle/dmg/TypeTidy_${{ github.ref_name }}_${{ matrix.target }}.dmg" \
            --apple-id "$APPLE_ID" \
            --password "$APPLE_PASSWORD" \
            --team-id "$APPLE_TEAM_ID" \
            --wait \
            --progress
          echo "Notarization completed"

      - name: Staple DMG
        if: matrix.platform == 'macos-latest'
        run: |
          echo "Stapling notarization ticket..."
          xcrun stapler staple "src-tauri/target/${{ matrix.target }}/release/bundle/dmg/TypeTidy_${{ github.ref_name }}_${{ matrix.target }}.dmg"
          echo "Stapling completed"
